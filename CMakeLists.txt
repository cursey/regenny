# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(regenny)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.08.15)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.08.15.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

include(FetchContent)

message(STATUS "Fetching sdkgenny (f03026eaced3bd033e201bc7d1c9d9d348054113)...")
FetchContent_Declare(sdkgenny
	GIT_REPOSITORY
		"https://github.com/cursey/sdkgenny.git"
	GIT_TAG
		f03026eaced3bd033e201bc7d1c9d9d348054113
)
FetchContent_MakeAvailable(sdkgenny)

# Packages
find_package(imgui REQUIRED)

find_package(fmt REQUIRED)

find_package(pegtl REQUIRED)

find_package(unofficial-nativefiledialog REQUIRED)

find_package(spdlog REQUIRED)

find_package(utf8cpp REQUIRED)

find_package(SDL2 REQUIRED)

find_package(nlohmann_json REQUIRED)

find_package(glad REQUIRED)

# Target regenny
set(CMKR_TARGET regenny)
set(regenny_SOURCES "")

list(APPEND regenny_SOURCES
	"src/AboutUi.cpp"
	"src/Config.cpp"
	"src/LoggerUi.cpp"
	"src/Main.cpp"
	"src/MemoryUi.cpp"
	"src/Process.cpp"
	"src/Project.cpp"
	"src/ReGenny.cpp"
	"src/Utility.cpp"
	"src/arch/Arch.cpp"
	"src/arch/Windows.cpp"
	"src/node/Array.cpp"
	"src/node/Base.cpp"
	"src/node/Bitfield.cpp"
	"src/node/Pointer.cpp"
	"src/node/Struct.cpp"
	"src/node/Undefined.cpp"
	"src/node/UndefinedBitfield.cpp"
	"src/node/Variable.cpp"
	"src/AboutUi.hpp"
	"src/Config.hpp"
	"src/Helpers.hpp"
	"src/LoggerUi.hpp"
	"src/MemoryUi.hpp"
	"src/Process.hpp"
	"src/Project.hpp"
	"src/ReGenny.hpp"
	"src/Utility.hpp"
	"src/arch/Arch.hpp"
	"src/arch/Windows.hpp"
	"src/node/Array.hpp"
	"src/node/Base.hpp"
	"src/node/Bitfield.hpp"
	"src/node/Pointer.hpp"
	"src/node/Property.hpp"
	"src/node/Struct.hpp"
	"src/node/Undefined.hpp"
	"src/node/UndefinedBitfield.hpp"
	"src/node/Variable.hpp"
	"thirdparty/SDL_Trigger/sdl_trigger.cpp"
	"thirdparty/scope_gaurd/scope_guard.hpp"
	"thirdparty/SDL_Trigger/sdl_trigger.h"
)

if(WIN32) # windows
	list(APPEND regenny_SOURCES
		"src/arch/Windows.rc"
	)
endif()

list(APPEND regenny_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${regenny_SOURCES})
add_executable(regenny)

if(regenny_SOURCES)
	target_sources(regenny PRIVATE ${regenny_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT regenny)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${regenny_SOURCES})

target_compile_definitions(regenny PRIVATE
	UTF_CPP_CPLUSPLUS=201103L
)

target_compile_features(regenny PRIVATE
	cxx_std_17
)

target_include_directories(regenny PRIVATE
	"src/"
	"thirdparty/scope_gaurd/"
	"thirdparty/SDL_Trigger/"
)

target_link_libraries(regenny PRIVATE
	imgui::imgui
	fmt::fmt
	taocpp::pegtl
	unofficial::nativefiledialog::nfd
	spdlog::spdlog
	utf8cpp
	SDL2::SDL2
	SDL2::SDL2main
	nlohmann_json::nlohmann_json
	glad::glad
	sdkgenny::sdkgenny
)

if(${VCPKG_TARGET_TRIPLET} MATCHES ".+static") # static
	set_target_properties(regenny PROPERTIES
		MSVC_RUNTIME_LIBRARY
			"MultiThreaded$<$<CONFIG:Debug>:Debug>"
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target test0
set(CMKR_TARGET test0)
set(test0_SOURCES "")

list(APPEND test0_SOURCES
	"examples/test0.cpp"
)

list(APPEND test0_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${test0_SOURCES})
add_executable(test0)

if(test0_SOURCES)
	target_sources(test0 PRIVATE ${test0_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test0)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test0_SOURCES})

target_compile_features(test0 PRIVATE
	cxx_std_17
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

install(
	TARGETS
		regenny
	DESTINATION
		bin
	COMPONENT
		regenny
)
